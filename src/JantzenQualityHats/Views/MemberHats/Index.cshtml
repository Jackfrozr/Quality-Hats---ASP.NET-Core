@model PaginatedList<JantzenQualityHats.Models.Hat>

@{
    ViewData["Title"] = "Hats";
}

<h2>Hats</h2>

<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name or supplier: <input type="text" name="SearchString" value="@ViewData["currentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Index">Back to List</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                Image
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewBag.NameSortParm">
                    Name
                </a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewBag.CategorySortParm">
                    Category
                </a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewBag.SupplierSortParm">
                    Supplier
                </a>
            </th>
            <th width="30%">
                Description
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewBag.PriceSortParm">
                   Price
                </a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {

    var imgUrl = @Href("~" + item.Image);
    var errImg = @Href("~/images/error.jpg");

        <tr>
            <td>
                <img style="width: 250px; height: auto;" src="@imgUrl" alt="Hat Image" onerror="this.onerror = null; this.src = '@errImg'">
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Category.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Supplier.Name)
            </td>
            <td width="30%">
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                <a asp-action="AddToCart" asp-controller="ShoppingCart" asp-route-id="@item.HatID">
                    <span class="glyphicon glyphicon-shopping-cart"></span>
                    Add To Cart
                </a>
            </td>
        </tr>
}
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
} 
<a asp-action="Index"
    asp-route-sortOrder="@ViewData["CurrentSort"]"
    asp-route-page="@(Model.PageIndex - 1)"
    asp-route-currentFilter="@ViewData["CurrentFilter"]"
    class="btn btn-default @prevDisabled btn">
        Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled btn">
    Next
</a>